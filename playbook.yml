---
- name: "creating aws infra"
  hosts: localhost
  become: true
  vars_files:
    - awsinfra_variables.yml
  tasks:

    - name: "creating ssh keypair"
      amazon.aws.ec2_key:
        name: "{{project}}_key"
        aws_access_key: "{{access_key}}"
        aws_secret_key: "{{secret_key}}"
        region: "{{region}}"
        state: present
      register: ssh_keypair

    - name: "saving private key"
      when: ssh_keypair.changed == true
      copy:
        content: "{{ssh_keypair.key.private_key}}"
        dest: "{{project}}.pem"
        owner: "ec2-user"
        group: "ec2-user"
        mode: 0400

    - name: "creating security group"
      amazon.aws.ec2_group:
        name: "{{project}}_sg"
        description: "allow traffic from 22, 80 & 443"
        aws_access_key: "{{access_key}}"
        aws_secret_key: "{{secret_key}}"
        region: "{{region}}"
        rules:
          - proto: tcp
            ports:
              - 80
              - 443
              - 22
            cidr_ip: 0.0.0.0/0
        tags:
          Name: "{{project}}_sg"
      register: sg_info

    - name: "creating ec2 instances"
      amazon.aws.ec2_instance:
        aws_access_key: "{{access_key}}"
        aws_secret_key: "{{secret_key}}"
        region: "{{region}}"
        key_name: "{{ssh_keypair.key.name}}"
        wait: yes
        exact_count: "{{instance_count}}"
        state: running
        instance_type: "t2.micro"
        security_group: "{{sg_info.group_id}}"
        image_id: "{{ami_id}}"
        tags:
          Name: "{{project}}-webserver"
          project: "{{project}}"

    - name: "fetching instance details"
      amazon.aws.ec2_instance_info:
        aws_access_key: "{{access_key}}"
        aws_secret_key: "{{secret_key}}"
        region: "{{region}}"
        filters:
          "tag:Name": "{{project}}-webserver"
          "tag:project": "{{project}}"
          instance-state-name: ["running"]
      register: servers

    - name: "dynamic inventory creation"
      add_host:
        hostname: "{{item.public_ip_address}}"
        ansible_ssh_user: "ec2-user"
        ansible_ssh_host: "{{item.public_ip_address}}"
        ansible_ssh_port: 22
        groups:
          - backends
        ansible_ssh_private_key_file: "{{project}}.pem"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      with_items: "{{servers.instances}}"

    - name: "creating classic load balancer"
      amazon.aws.elb_classic_lb:
         name: "ansible-clb"
         state: present
         aws_secret_key: "{{secret_key}}"
         aws_access_key: "{{access_key}}"
         region: "{{region}}"
         security_group_ids: "{{sg_info.group_id}}"
         zones:
          - "{{region}}a"
          - "{{region}}b"
         listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
          - protocol: https
            load_balancer_port: 443
            instance_protocol: http
            instance_port: 80
            ssl_certificate_id: "{{ssl_id}}"
         health_check:
            ping_protocol: http
            ping_port: 80
            ping_path: "/health.html"
            response_timeout: 5
            interval: 20
            unhealthy_threshold: 2
            healthy_threshold: 2
         instance_ids: "{{item.instance_id}}"
      with_items: "{{servers.instances}}"
      register: clb_info

    - name: Adding alias record that points to CLB
      when: clb_info.changed == true
      community.aws.route53:
        aws_access_key: "{{access_key}}"
        aws_secret_key: "{{secret_key}}"
        state: present
        record: "{{domain}}"
        hosted_zone_id: "{{zone_id}}"
        type: A
        value: "{{clb_info.results.0.elb.dns_name}}"
        alias: True
        alias_hosted_zone_id: "{{clb_info.results.0.elb.hosted_zone_id}}"

- name: "configuring backend servers"
  become: true
  hosts: backends
  vars_files:
    - variables.yml
  tasks:

    - name: "installing packages"
      yum:
        name: "{{packages}}"
        state: present

    - name: "creating httpd.conf from http template file"
      template:
        src: ./httpd.conf.tmpl
        dest: /etc/httpd/conf/httpd.conf
      register: config_status

    - name: "creating virtualhost"
      template:
        src: ./virtualhost.conf.tmpl
        dest: "/etc/httpd/conf.d/{{httpd_hostname}}.conf"
        owner: "{{httpd_owner}}"
        group: "{{httpd_group}}"
      register: vhost_status

    - name: "creating document root for {{httpd_hostname}}"
      file:
        path: "{{doc_root}}"
        state: directory

    - name: "cloning git repository from {{git_url}} to {{clone_dir}}"
      git:
        repo: "{{git_url}}"
        dest: "{{clone_dir}}"
      register: gitclone_status

    - name: "copying contents from {{clone_dir}} to {{doc_root}}"
      when: gitclone_status.changed == true
      copy:
        src: "{{clone_dir}}"
        dest: "{{doc_root}}"
        owner: "{{httpd_owner}}"
        group: "{{httpd_group}}"
        remote_src: true

    - name: "restarting & enabling apache"
      when: config_status.changed == true or vhost_status.changed == true or gitclone_status.changed == true
      service:
        name: httpd
        state: restarted
        enabled: true
